#XML Generator Imports
from control.profile.generator.base.basegenerator import basegenerator
from utils.singleton import singleton
import xml.etree.cElementTree as cET
from xml.dom import minidom
#Math Import
import random
#System Import
import os

#OSM Map Generator parameters
DEFAULT_NUM_NODES = 1000
DEFAULT_NUM_WAYS = 1000
DEFAULT_ADJACENCY = 100
DEFAULT_EXPANSION = 1000

@singleton
class OsmGenerator(basegenerator):
    """
    Random OSM Map generator singleton, used when on profiling mode.
    """    
    def __init__(self):        
        self.num_nodes = DEFAULT_NUM_NODES 
        self.num_ways = DEFAULT_NUM_WAYS
        self.adjacency = DEFAULT_ADJACENCY
        self.expansion = DEFAULT_EXPANSION
        self._nodes_id = []
        
    def generate(self, directory = None):
        """
        Generates a Random OSM Map. 
        If directory is specified, the generated map will be saved in the specified directory,
        otherwise it will be returned as string.
        
        generated(directory = None) -> None or map
        
        @type directory: string
        @param directory: absolute directory path.
        
        @rtype: None if directory is specified, otherwise string
        @return: None if directory is specified, otherwise the generated OSM Map.
        """
        self._nodes_id = []
        string = "OSM Map generated by iPath. Nodes: {}, Ways: {}, Adjacency: {}, Expansion: {}.".format(str(self.num_nodes), str(self.num_ways), str(self.adjacency), str(self.expansion)) 
        comment = cET.Comment(string)        
        
        osm = cET.Element("osm")
        osm.append(comment)
        
        for i in range(0, self.num_nodes):
            node = cET.SubElement(osm, "node")
            node.set("id", str(i))
            node.set("lat", str(random.uniform(0, self.expansion)))
            node.set("lon", str(random.uniform(0, self.expansion)))
            self._nodes_id.append(i)
            
        for i in range(0, self.num_ways):
            way = cET.SubElement(osm, "way")
            way.set("id", str(i))
            for j in range(1, self.adjacency):
                adj_node = cET.SubElement(way, "nd")
                adj_node.set("ref", str(random.choice(self._nodes_id)))
        
        if directory is None:
            rough_string = cET.tostring(osm, 'utf-8')
            reparsed = minidom.parseString(rough_string)
            return reparsed.toxml()
            #return self.__prettify(osm)
        else:
            file_name = "OsmGenerator N{} W{} A{} E{}.xml".format(str(self.num_nodes), str(self.num_ways), str(self.adjacency), str(self.expansion))
            file_path = os.path.join(directory, file_name)
            file_stream = open(file_path, "wb")
            file_stream.write(self.__prettify(osm))
            file_stream.close()
        
    def __prettify(self, element):
        """
        Generates a better human-readable OSM string.
        
        __prettify(element) -> reparsed_string
        
        @type element: string
        @param element: generated OSM Map string.
        
        @rtype: string
        @return: reparsed OSM Map string.
        """
        rough_string = cET.tostring(element, 'utf-8')
        reparsed = minidom.parseString(rough_string)
        return reparsed.toprettyxml(indent = "\t")        
        
def __test(generator, num_nodes, num_ways, adjacency, directory):
    """
    Random OSM Map Generator Test.
    
    __test(generator, num_nodes, num_ways, adjacency, directory) -> None
    
    @type generator: OsmGenerator
    @param generator: generator instance.
    @type num_nodes: int
    @param num_nodes: number of nodes in the generated OSM Map.
    @type num_ways: int
    @param num_ways: number of ways in the generated OSM Map.
    @type adjacency: int
    @param adjacency: number of adjacent nodes / way in the generated OSM Map.
    @type directory: string
    @param directory: a valid output directory for storing the generated OSM Map.
    """       
    if not isinstance(generator, basegenerator):
        raise TypeError("Expected type was OSM Generator.") 
    
    print "### iPATH TEST RANDOM GENERATOR"  
    print "### Data Type: OSM Generator({})".format(str(generator.__class__.__bases__[0].__name__))
    print "### Implementation: {}".format(str(generator.__class__.__name__))  
    
    generator.num_nodes = num_nodes
    generator.num_ways = num_ways
    generator.adjacency = adjacency 
    
    print "\n*** OSM GENERATION TO FILE ***\n"         
    print "Nodes: " + str(generator.num_nodes)
    print "Ways: " + str(generator.num_ways)  
    print "Adjacency: " + str(generator.adjacency)
    print "Generating OSM . . ."
    generator.generate(OUTPUT_DIR)
    print "Generated OSM: {}".format(OUTPUT_DIR)
    
    print "\n*** OSM GENERATION TO STRING ***\n"       
    print "Nodes: " + str(generator.num_nodes)    
    print "Ways: " + str(generator.num_ways)    
    print "Adjacency: " + str(generator.adjacency)        
    print "Generating OSM . . ."
    generatedOsm = generator.generate()    
    print "Generated OSM:\n{}\n".format(str(generatedOsm))
    
    print "\n### END OF TEST ###\n"    
    
if __name__ == "__main__":
    #Test Import
    from output.__init__ import OUTPUT_DIR
    
    generator = OsmGenerator()
    num_nodes = 100
    num_ways = 100
    adjacency = 10
    directory = OUTPUT_DIR
    
    __test(generator, num_nodes, num_ways, adjacency, directory)